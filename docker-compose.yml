version: "3.6"
services:
  database:
    image: mysql:8.0.30-debian
    container_name: cosmos_db
    cap_add:
      - SYS_NICE # Fix mbind issue
    env_file:
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/.env
    logging:
      driver: "local"
      options:
        max-file: 5
        max-size: 10m
    networks:
      - cwnetwork
    restart: always
    volumes:
      # Mount for data directory and configuration
      - database:/var/lib/mysql
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/database:/docker-entrypoint-initdb.d

  grafana:
    image: grafana/grafana-oss:9.5.1
    container_name: cosmos_grafana
    depends_on:
      - database
      - grafana-plugins
    env_file:
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/.env
    logging:
      driver: "local"
      options:
        max-file: 5
        max-size: 10m
    networks:
      - cwnetwork
    ports:
      - "3000:3000"
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_panel_plugins:/var/lib/grafana/plugins/cosmos-plugins

  grafana-plugins:
    image: hsfl2/grafana_plugins:0.2.0
    container_name: cosmos_grafana_plugins
    volumes:
      - grafana_panel_plugins:/home/cosmos-grafana-plugins/build

  backend:
    image: hsfl2/web_backend:0.5.0
    #platform: linux/x86_64 # tentatively used for macOS M1 to compile grafana plugins
    command: sh -c "cp /root/web_core_dist/CosmosWebCore.data /home/node/app/; npm run dev"
    container_name: cosmos_backend
    logging:
      driver: "local"
      options:
        max-file: 5
        max-size: 10m
    networks:
      - cwnetwork
    ports:
      - "10090:10090"
    restart: always
    volumes:
      # For accessing database stuff
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/.env:/home/node/app/.env
      # Access to COSMOS binaries
      - bin:/home/web_user/cosmos/bin
      - resources:/home/web_user/cosmos/resources

  influxdb:
    image: influxdb:2.6.1
    container_name: cosmos_influxdb
    env_file:
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/.env
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_BUCKET=COSMOS_Dev_Bucket
    logging:
      driver: "local"
      options:
        max-file: 5
        max-size: 10m
    networks:
      - cwnetwork
    ports:
      - "8086:8086"
    restart: always
    volumes:
      # Mount for influxdb data directory and configuration
      - influxdb2:/var/lib/influxdb2

  telegraf:
    image: telegraf:1.25.0
    container_name: cosmos_telegraf
    env_file:
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/.env
    environment:
      # InfluxDB output setup
      - DOCKER_INFLUXDB_INIT_BUCKET=COSMOS_Dev_Bucket
      # Reserve ports for data ingestion
      - COSMOS_DEV_PORT=10095
      - AGENT_BEACON_PORT=10096
      - BACKEND_API_PORT=10097
      - LOG_PORT=10098
    logging:
      driver: "local"
      options:
        max-file: 5
        max-size: 10m
    networks:
      - cwnetwork
    ports:
      # accessible to agent_ground and other external programs
      - "10095:10095/udp"
      - "10096:10096/udp"
      - "10097:10097/udp"
      - "10098:10098/udp"
    restart: always
    volumes:
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/telegraf_scripts/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ${COSMOSWEBDIR:?Please run `docker compose up -d` from the root cosmos folder.}/telegraf_scripts:/telegraf_scripts:ro
    depends_on:
      - influxdb

  loki:
    image: grafana/loki:2.7.0
    container_name: cosmos_log
    command: -config.file=/etc/loki/local-config.yaml
    logging:
      driver: "local"
      options:
        max-file: 5
        max-size: 10m
    networks:
      - cwnetwork
    ports:
      - "3100:3100"
    restart: always
    volumes:
      - logs:/loki

volumes:
  bin: {}
  resources: {}
  database: {}
  logs: {}
  grafana_data: {}
  grafana_panel_plugins: {}
  influxdb2: {}

networks:
  cwnetwork:
    name: cosmos_cwnetwork
    external: true
    driver: bridge
# TODO:
# Add port configurations, don't want to use common ports like 3000, 5000, etc.
