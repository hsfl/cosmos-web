# Configuration for telegraf agent
[agent]
	## Default data collection interval for all inputs
	interval = "10m"
	## Rounds collection interval to 'interval'
	## ie, if interval="10s" then always collect on :00, :10, :20, etc.
	round_interval = true

	## Telegraf will send metrics to outputs in batches of at most
	## metric_batch_size metrics.
	## This controls the size of writes that Telegraf sends to output plugins.
	metric_batch_size = 5000

	## For failed writes, telegraf will cache metric_buffer_limit metrics for each
	## output, and will flush this buffer on a successful write. Oldest metrics
	## are dropped first when this buffer fills.
	## This buffer only fills when writes fail to output plugin(s).
	metric_buffer_limit = 20000

	## Collection jitter is used to jitter the collection by a random amount.
	## Each plugin will sleep for a random time within jitter before collecting.
	## This can be used to avoid many plugins querying things like sysfs at the
	## same time, which can have a measurable effect on the system.
	collection_jitter = "0s"

	## Default flushing interval for all outputs. Maximum flush_interval will be
	## flush_interval + flush_jitter
	flush_interval = "10s"
	## Jitter the flush interval by a random amount. This is primarily to avoid
	## large write spikes for users running a large number of telegraf instances.
	## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
	flush_jitter = "0s"

	## By default or when set to "0s", precision will be set to the same
	## timestamp order as the collection interval, with the maximum being 1s.
	##	 ie, when interval = "10s", precision will be "1s"
	##			 when interval = "250ms", precision will be "1ms"
	## Precision will NOT be used for service inputs. It is up to each individual
	## service input to set the timestamp at the appropriate precision.
	## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
	precision = ""

	## Logging configuration:
	## Run telegraf with debug log messages.
	debug = false
	## Run telegraf in quiet mode (error log messages only).
	quiet = true
	## Specify the log file name. The empty string means to log to stderr.
	logfile = ""

	## Override default hostname, if empty use os.Hostname()
	hostname = ""
	## If set to true, do no set the "host" tag in the telegraf agent.
	omit_hostname = false

#########################################################
# OUTPUTS
#########################################################
# InfluxDB to be used for developer convenience
[[outputs.influxdb_v2]]	
	## The URLs of the InfluxDB cluster nodes.
	##
	## Multiple URLs can be specified for a single cluster, only ONE of the
	## urls will be written to each interval.
	## urls exp: http://127.0.0.1:8086
	urls = ["http://influxdb:8086"]

	## Token for authentication.
	token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN"

	## Organization is the name of the organization you wish to write to; must exist.
	organization = "$DOCKER_INFLUXDB_INIT_ORG"

	## Destination bucket to write into.
	bucket = "COSMOS_Dev_Bucket"

    # This tag is given in json_to_influxdb.star, remove it before outputting
    tagexclude = ["telegraf_datatag"]
    [outputs.influxdb_v2.tagpass]
        telegraf_datatag = ["cosmos_influxdb"]

# For simulator data
# [[outputs.influxdb_v2]]	
# 	## The URLs of the InfluxDB cluster nodes.
# 	##
# 	## Multiple URLs can be specified for a single cluster, only ONE of the
# 	## urls will be written to each interval.
# 	## urls exp: http://127.0.0.1:8086
# 	urls = ["http://influxdb:8086"]

# 	## Token for authentication.
# 	token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN"

# 	## Organization is the name of the organization you wish to write to; must exist.
# 	organization = "$DOCKER_INFLUXDB_INIT_ORG"

# 	## Destination bucket to write into.
# 	bucket = "COSMOS_Dev_Bucket"

#     namepass = ["simdata"]

# Call beacon write endpoint
[[outputs.http]]
    # Endpoint
    url = "http://cosmos_backend:10090/db/beacon/"
    timeout = "2s"
    method = "POST"
    data_format = "json"
    non_retryable_statuscodes = [400,404,413,500]
    tagexclude = ["telegraf_datatag"]
    [outputs.http.headers]
        Content-Type = "application/json"
    [outputs.http.tagpass]
        telegraf_datatag = ["cosmos_beacon"]

# Call reset endpoint (disabled for production)
[[outputs.http]]
    # Endpoint
    url = "http://cosmos_backend:10090/db/resetdanger/"
    timeout = "2s"
    method = "POST"
    data_format = "json"
    non_retryable_statuscodes = [400,404,413,500]
    tagexclude = ["telegraf_datatag"]
    [outputs.http.headers]
        Content-Type = "application/json"
    [outputs.http.tagpass]
        telegraf_datatag = ["backend_resetdanger"]


# For log data
[[outputs.loki]]
    ## The domain of loki
    domain = "http://loki:3100"
    ## Endpoint to write api
    endpoint = "/loki/api/v1/push"
    # This tag given by log_parser.star
    tagexclude = ["telegraf_datatag"]
    [outputs.loki.tagpass]
        telegraf_datatag = ["cosmos_log"]

# For log data
[[outputs.loki]]
    ## The domain of loki
    domain = "http://loki:3100"
    ## Endpoint to write api
    endpoint = "/loki/api/v1/push"
    namepass = ["log"]


# For debugging
# [[outputs.file]]
# 	files = ["stdout"]
# 	data_format = "influx"


#########################################################
# INPUTS
#########################################################
# Listen for json being sent on port COSMOS_DEV_PORT
#  input: json string
# output: gr_heartbeat
[[inputs.socket_listener]]
	service_address = "udp://:$COSMOS_DEV_PORT"
	# override default metric name so starlark processor can catch it below
	name_override = "input_influxdb"
	data_format = "value"
	data_type = "string"
    # telegraf_datatag to be given in json_to_influxdb.star

# Listen for json beacons being sent on port AGENT_BEACON_PORT
#  input: COSMOS beacon json string
# output: gr_beacon
[[inputs.socket_listener]]
	service_address = "udp://:$AGENT_BEACON_PORT"
	data_format = "value"
	data_type = "string"
    [inputs.socket_listener.tags]
        telegraf_datatag="cosmos_beacon"

# Listen for json beacons being sent on port BACKEND_API_PORT
# Used for calling backend endpoints
#  input: COSMOS beacon json string
# output: gr_beacon
[[inputs.socket_listener]]
	service_address = "udp://:$BACKEND_API_PORT"
	data_format = "value"
	data_type = "string"
    [inputs.socket_listener.tags]
        telegraf_datatag="backend_resetdanger"

# Listen for json simulator data being sent on port SIMDATA_PORT
#  input: simulator data json string
# output: gr_simdata
# [[inputs.socket_listener]]
# 	service_address = "udp://:$SIMDATA_PORT"
# 	# override default metric name so starlark processor can catch it below
# 	name_override = "gr_simdata"
# 	data_format = "value"
# 	data_type = "string"

# Listen for log data being sent on port LOG_PORT
#  input: log json string
# output: gr_log
[[inputs.socket_listener]]
	# override default metric name so starlark processor can catch it below
	name_override = "input_log"
	service_address = "udp://:$LOG_PORT"
	data_format = "value"
	data_type = "string"


#########################################################
# PROCESSORS
#########################################################
#  input: input_influxdb
# output: json converted to influxdb line format
[[processors.starlark]]
	namepass = ["input_influxdb"]
	script = "/telegraf_scripts/json_to_influxdb.star"

#  input: tagged with cosmos_beacon
# output: sohs in line format
# [[processors.starlark]]
# 	script = "/telegraf_scripts/beacon_parser.star"
#     [processors.starlark.tagpass]
#         telegraf_datatag = ["cosmos_beacon"]

#  input: gr_simdata
# output: simulator data in line format
# [[processors.starlark]]
# 	namepass = ["gr_simdata"]
# 	script = "/telegraf_scripts/simdata_parser.star"

#  input: input_log
# output: simulator data in line format
[[processors.starlark]]
    namepass = ["input_log"]
	script = "/telegraf_scripts/log_parser.star"
